<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10. Makefile</title>
    <url>/2023/01/11/10-Makefile/</url>
    <content><![CDATA[<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p>makefile是简化编译的工具，是一个变量名和目标的命令行组合。你可以用makefile来编译程序或单独编译更新的文件。</p>
<p>prerequisite：<a href="https://username0occupied.github.io/2023/01/01/2-compile-link/">https://username0occupied.github.io/2023/01/01/2-compile-link/</a></p>
<h3 id="review"><a href="#review" class="headerlink" title="review"></a>review</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//factorial.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*<span class="built_in">factorial</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//function.h</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_hello</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">print_hello</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;This is main:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;The factorial of 5 is:&quot;</span>&lt;&lt;<span class="built_in">factorial</span>(<span class="number">5</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//printhello.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello world!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//factorial.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*<span class="built_in">factorial</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//printhello.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello world!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//function.h</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_hello</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">print_hello</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;This is main:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;The factorial of 5 is:&quot;</span>&lt;&lt;<span class="built_in">factorial</span>(<span class="number">6</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># targets:prerequisites</span></span><br><span class="line"><span class="comment"># &lt;TAB&gt;command</span></span><br><span class="line"><span class="comment"># hello:main.cpp printhello.cpp factorial.cpp</span></span><br><span class="line"><span class="comment"># 	g++ -o hello main.cpp printhello.cpp factorial.cpp</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># using variable in makefile</span></span><br><span class="line"><span class="comment"># CC=g++</span></span><br><span class="line"><span class="comment"># TARGET=hello</span></span><br><span class="line"><span class="comment"># OBJ=main.o printhello.o factorial.o</span></span><br><span class="line"><span class="comment"># $(TARGET):$(OBJ)</span></span><br><span class="line"><span class="comment"># 	$(CC) -o $(TARGET) $(OBJ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main.o:main.cpp</span></span><br><span class="line"><span class="comment"># 	$(CC) -c main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># printhello.o:printhello.cpp</span></span><br><span class="line"><span class="comment"># 	$(CC) -c printhello.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># factorial.o:factorial.cpp</span></span><br><span class="line"><span class="comment"># 	$(CC) -c factorial.cpp</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Using several rules and several targets</span></span><br><span class="line">CC=g++</span><br><span class="line">TARGET=hello</span><br><span class="line">OBJ=main.o printhello.o factorial.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># options pass to the compiler</span></span><br><span class="line"><span class="comment"># -c generates the object file</span></span><br><span class="line"><span class="comment"># -Wall displays compiler warning</span></span><br><span class="line">CFLAGES=-c -Wall</span><br><span class="line"></span><br><span class="line"><span class="comment"># $@:object files</span></span><br><span class="line"><span class="variable">$(TARGET)</span>:<span class="variable">$(OBJ)</span></span><br><span class="line">	<span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$(OBJ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&lt;: the first prerequisite file</span></span><br><span class="line"><span class="comment"># $^: all the prerequisite files</span></span><br><span class="line"><span class="section">%.o:%.cpp</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGES)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .PHONY a fake newest file</span></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean: </span></span><br><span class="line">	rm -f *.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wildcard:search file</span></span><br><span class="line"><span class="comment"># patsubst(pattern substitution):replace file</span></span><br><span class="line"><span class="comment"># $(patsubst original pattern,target pattern,file list)</span></span><br><span class="line">SRC=<span class="variable">$(<span class="built_in">wildcard</span> ./*.cpp)</span></span><br><span class="line">OBJ=<span class="variable">$(<span class="built_in">patsubst</span> %.cpp,%.o,<span class="variable">$(SRC)</span>)</span></span><br><span class="line"><span class="section">target:</span></span><br><span class="line">	@echo <span class="variable">$(SRC)</span></span><br><span class="line">	@echo <span class="variable">$(OBJ)</span></span><br><span class="line"><span class="comment"># ./factorial.cpp ./main.cpp ./printhello.cpp All *.cpp files in current directory</span></span><br><span class="line"><span class="comment"># ./factorial.o   ./main.o   ./printhello.o</span></span><br></pre></td></tr></table></figure></div>



<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><blockquote>
<p>\1. The <em>Fibonacci numbers</em> are : 1,1,2,3,5,8……. Please define a function named <strong>fib.cpp</strong> to compute the <em>n</em>th Fibonacci number. In <strong>main.cpp</strong>, prompts the user to input an integer n, print Fibonacci numbers from 1 to n, 10 numbers per line. Write a <strong>makefile</strong> to complete the compilation.</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./INC/fib.h</span></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">fib</span><span class="params">(<span class="type">int</span> *series,<span class="type">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./SRC/fib.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;fib.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">fib</span><span class="params">(<span class="type">int</span> *series,<span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=length&amp;&amp;i&lt;=<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        series[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        series[i]=series[i<span class="number">-1</span>]+series[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> series;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./SRC/main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;fib.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> vol=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Please input which is quest the number of Fibonacci?&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;vol;</span><br><span class="line">    <span class="keyword">if</span>(vol&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> *series=<span class="keyword">new</span> <span class="type">int</span>[vol<span class="number">-1</span>];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line">        series=<span class="built_in">fib</span>(series,vol);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(vol/<span class="number">10</span>)+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p=i*<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=p;j&lt;(p+<span class="number">10</span>)&amp;&amp;j&lt;vol;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;series[j]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;You put a wrong number&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">SRC_DIR=./SRC</span><br><span class="line">SOURCE=<span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(SRC_DIR)</span>/*.cpp)</span></span><br><span class="line">OBJS=<span class="variable">$(<span class="built_in">patsubst</span> %.cpp,%.o,<span class="variable">$(SOURCE)</span>)</span></span><br><span class="line">TARGET=fibonacci</span><br><span class="line">INCLUDE=-I ./INC</span><br><span class="line"></span><br><span class="line">CC=g++</span><br><span class="line">CFLAGS= -c -Wall</span><br><span class="line"><span class="variable">$(TARGET)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="section">%.o:%.cpp</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span> <span class="variable">$(INCLUDE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f <span class="variable">$(SRC_DIR)</span>/*.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>2. compile &amp; link</title>
    <url>/2023/01/01/2-compile-link/</url>
    <content><![CDATA[<p>单独c++文件</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//函数的声明、定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Pick two integers:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cin &gt;&gt; b;</span><br><span class="line">    result = <span class="built_in">mul</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The result is &quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>把一个源文件拆成多个文件</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Pick two integers:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cin &gt;&gt; b;</span><br><span class="line">    result = <span class="built_in">mul</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This result is &quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mul.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mul.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mul.hpp&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">//单独编译main</span><br><span class="line">g++ -c main.cpp</span><br><span class="line">单独编译mul</span><br><span class="line">g++ -c mul.cpp</span><br><span class="line">//链接main mul</span><br><span class="line">g++ main.o mul.o -o mul</span><br><span class="line">./mul</span><br><span class="line">Pick two integers</span><br><span class="line">5 7</span><br><span class="line">The result is35</span><br><span class="line">//同时编译和链接</span><br><span class="line">g++ main.cpp mul.cpp -o mul</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20230101223410746.png"
                      alt="image-20230101223410746"
                ></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>3. preprocessor &amp; macros</title>
    <url>/2023/01/02/3-preprocessor-macros/</url>
    <content><![CDATA[<p>预处理指令：</p>
<p>在编译之前处理的指令</p>
<p>以#开头，每条指令占据一行</p>
<p>指令define、undef、include、if、ifdef、elif、else、elif、endif、line、error、pragma</p>
<p>include的意义是把头文件复制到当前文件</p>
<p>宏Macro 作用是文字替换</p>
<p>输入输出</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">std::ostream cout</span><br><span class="line"><span class="comment">//cout是一个对象，对象类型是ostream，命名空间std，命名空间是为了防止重名</span></span><br><span class="line"><span class="comment">//endl可以输出一个换行符</span></span><br><span class="line"><span class="comment">//&lt;&lt;是操作符，&gt;&gt;也是操作符</span></span><br><span class="line">c语言的输入输出 printf；scanf；都是函数</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令行参数,argc参数个数，argv参数名称的一维数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;argc;endl)</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;argv[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./a.out hello world</span><br><span class="line">0:./a.out</span><br><span class="line">1:hello</span><br><span class="line">2:world</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>4. more types</title>
    <url>/2023/01/03/4-more-types/</url>
    <content><![CDATA[<h2 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型"></a>整数数据类型</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;<span class="comment">//声明</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">10</span>;<span class="comment">//声明并赋值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">j</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> j&#123;<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure></div>

<p>signed int -2^31~2^31-1</p>
<p>unsigned int 0~2^32</p>
<p>long int,short int,long long int</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i=0;</span><br><span class="line">short s=0;</span><br><span class="line">cout&lt;&lt;&quot;sizeof(int)&quot;&lt;&lt;sizeof(int)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;sizeof(i)&quot;&lt;&lt;sizeof(i)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;sizeof(short)&quot;&lt;&lt;sizeof(s)&lt;&lt;endl;</span><br><span class="line">//sizeof()不是函数，是操作符</span><br><span class="line">cout&lt;&lt;&quot;sizeof(long)&quot;&lt;&lt;sizeof(long)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;sizeof(size_t)&quot;&lt;&lt;sizeof(size_t)&lt;&lt;endl;</span><br></pre></td></tr></table></figure></div>



<h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>char字符，8位整数</p>
<p>signed char,unsigned char</p>
<p>char 不一定是unsigned或signed</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c1 = &#x27;C&#x27;;</span><br><span class="line">    char c2 = 80;</span><br><span class="line">    char c3 = 0x50;</span><br><span class="line">    char16_t c4 = u&#x27;黄&#x27;;</span><br><span class="line">    char32_t c5 = U&#x27;黄&#x27;;</span><br><span class="line">    cout &lt;&lt; c1 &lt;&lt; &quot;:&quot; &lt;&lt; c2 &lt;&lt; &quot;:&quot; &lt;&lt; c3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; +c1 &lt;&lt; &quot;:&quot; &lt;&lt; +c2 &lt;&lt; &quot;:&quot; &lt;&lt; +c3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c4 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c5 &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> b1=<span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> i=b1;</span><br><span class="line">    <span class="type">bool</span> b2=<span class="number">-256</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;i=&quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b1=&quot;</span>&lt;&lt;b1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b2=&quot;</span>&lt;&lt;b2&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//非0即true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在一些老的c语言程序中</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> <span class="type">bool</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line">    </span><br><span class="line">或</span><br><span class="line"><span class="meta">#inclde<span class="string">&lt;stdbool.h&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>使用typedef定义新变量</p>
<blockquote>
<p>typedef为C语言的<a class="link"   href="https://baike.baidu.com/item/%E5%85%B3%E9%94%AE%E5%AD%97?fromModule=lemma_inlink" >关键字 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，作用是为一种数据类型定义一个新名字。这里的数据类型包括内部数据类型（int,char等）和自定义的数据类型（struct等）。</p>
<p>在编程中使用typedef目的一般有两个，一个是给变量一个易记且意义明确的新名字，另一个是简化一些比较复杂的类型声明。</p>
</blockquote>
<h3 id="size-t"><a href="#size-t" class="headerlink" title="size_t"></a>size_t</h3><p>无符号整数</p>
<p>理论上可以存储最大的任意类型的变量</p>
<h3 id="头文件cstdint"><a href="#头文件cstdint" class="headerlink" title="头文件cstdint"></a>头文件cstdint</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">引入</span><br><span class="line">int8_t</span><br><span class="line">int16_t</span><br><span class="line">int32_t</span><br><span class="line">int64_t</span><br><span class="line">uint8_t</span><br><span class="line">uint16_t</span><br><span class="line">uint32_t</span><br><span class="line">uint64_t</span><br><span class="line">INT8_MIN</span><br><span class="line">INT16_MIN</span><br><span class="line">INT32_MIN</span><br><span class="line">INT8_MAX</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>5. Float point Num.</title>
    <url>/2023/01/04/5-Float-point-Num/</url>
    <content><![CDATA[<h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>一个float占用32位，符号位一位，指数位exponent 8位，精确度位fraction 23位</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.588ex" height="2.7ex" role="img" focusable="false" viewBox="0 -943.3 10867.7 1193.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1167,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(1667,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(3223.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(4223.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="msub" transform="translate(1608.1,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(2827.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mtext" transform="translate(3999.2,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(4249.2,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="msub" transform="translate(5468.3,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(6293.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7071.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.954ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7051.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1167,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="msub" transform="translate(2386.1,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(3771.9,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mtext" transform="translate(5110.5,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(5360.5,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="msub" transform="translate(6226.1,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p>
<p>不能用等号判断浮点数是否相等，应该用</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(f1-f2)&lt;FLT_EPSILON)</span><br><span class="line"><span class="comment">//数学意义|a-b|&lt;ε</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">float</span> f1=<span class="number">1.2f</span>;</span><br><span class="line">    <span class="type">float</span> f2 =f1*<span class="number">1e15</span>;</span><br><span class="line">    cout&lt;&lt;std::fixed&lt;&lt;std::<span class="built_in">setprecision</span>(<span class="number">15</span>)&lt;&lt;f1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;std::fixed&lt;&lt;std::<span class="built_in">setprecision</span>(<span class="number">15</span>)&lt;&lt;f2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//二进制和十进制之间转换有误差</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">float</span> f1=<span class="number">2.34E+10</span>f;</span><br><span class="line">    <span class="type">float</span> f2=f1+<span class="number">10</span>;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios_base::fixed,ios_base::floatfield);</span><br><span class="line">    cout&lt;&lt;<span class="string">"f1="</span>&lt;&lt;f1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"f2="</span>&lt;&lt;f2&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"f1-f2="</span>&lt;&lt;f1-f2&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"(f1-f2==0)="</span>&lt;&lt;(f1-f2==<span class="number">0</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//f1=23399999488.000000</span></span><br><span class="line"><span class="comment">//f2=23399999488.000000</span></span><br><span class="line"><span class="comment">//f1-f2=0.000000</span></span><br><span class="line"><span class="comment">//(f1-f2==0)=1</span></span><br></pre></td></tr></table></figure></div>

<p>优势：表达的范围广</p>
<p>劣势：计算比整数慢，精度比整数低</p>
<h2 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h2><p>64位</p>
<h2 id="Long-Double"><a href="#Long-Double" class="headerlink" title="Long Double"></a>Long Double</h2><p>64位或128位</p>
<h2 id="INF"><a href="#INF" class="headerlink" title="INF"></a>INF</h2><p>表示无穷大的值 1.0f/0.0f （Exponent=11111111, fraction=0）</p>
<h2 id="NAN"><a href="#NAN" class="headerlink" title="NAN"></a>NAN</h2><p>不是一个数 0.0f/0.0f  （Exponent=11111111, fraction!=0）</p>
<p>如果计算中出现INF或NAN则后续计算中将会一直出现错误</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>6. Arithmetic Operators</title>
    <url>/2023/01/04/6-Arithmetic-Operators/</url>
    <content><![CDATA[<h2 id="常数表达"><a href="#常数表达" class="headerlink" title="常数表达"></a>常数表达</h2><ol>
<li><p>95//十进制</p>
</li>
<li><p>0137//八进制</p>
</li>
<li><p>0x5F//十六进制</p>
</li>
<li><p>95//int</p>
</li>
<li><p>95u//unsigned int </p>
</li>
<li><p>95l//long</p>
</li>
<li><p>95ul//unsigned long</p>
</li>
<li><p>95lu//unsigned long</p>
</li>
<li><p>3.14//3.14</p>
</li>
<li><p>6.02e23//6.02e23</p>
</li>
<li><p>1.6e-19</p>
</li>
<li><p>3.0//3.0</p>
</li>
<li><p>6.02e23L//long double</p>
</li>
<li><p>6.02e23f//float</p>
</li>
<li><p>6.02e23 //double</p>
</li>
</ol>
<h2 id="类型限定值"><a href="#类型限定值" class="headerlink" title="类型限定值"></a>类型限定值</h2><p>const float PI=3.1415926f;<br>可以替代宏定义</p>
<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>自动类型，初始化的赋值的类型就是声明的类型</p>
<h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><table>
<thead>
<tr>
<th>Operator name</th>
<th>Syntax</th>
</tr>
</thead>
<tbody><tr>
<td>unary plus</td>
<td>+a</td>
</tr>
<tr>
<td>unary minus</td>
<td>-a</td>
</tr>
<tr>
<td>addition</td>
<td>a+b</td>
</tr>
<tr>
<td>subtraction</td>
<td>a-b</td>
</tr>
<tr>
<td>multiplacation</td>
<td>a*b</td>
</tr>
<tr>
<td>division</td>
<td>a/b</td>
</tr>
<tr>
<td>modulo</td>
<td>a%b</td>
</tr>
<tr>
<td>bitwise NOT</td>
<td>~a</td>
</tr>
<tr>
<td>bitwise AND</td>
<td>a&amp;b</td>
</tr>
<tr>
<td>bitwise OR</td>
<td>a|b</td>
</tr>
<tr>
<td>bitwise XOR</td>
<td>a^b</td>
</tr>
<tr>
<td>bitwise left shift</td>
<td>a&lt;&lt;b</td>
</tr>
<tr>
<td>bitwise right shift</td>
<td>a&gt;&gt;b</td>
</tr>
</tbody></table>
<p>运算优先级</p>
<p>a++ ++a * / + - &lt;&lt; &gt;&gt;</p>
<p>赋值操作符 =</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> num1=<span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> num2 =<span class="string">'C'</span>;<span class="comment">//隐式类型转换，implicit conversion</span></span><br><span class="line">    <span class="type">int</span> num3=(<span class="type">int</span>)<span class="string">'C'</span>;<span class="comment">//显式类型转换，explicit conversion</span></span><br><span class="line">    <span class="type">int</span> num4=<span class="built_in">int</span>(<span class="string">'C'</span>);<span class="comment">//显示类型转换</span></span><br><span class="line">    <span class="type">int</span> num5=<span class="number">2.8</span>;<span class="comment">//隐式类型转换</span></span><br><span class="line">    <span class="type">float</span> num6=<span class="number">2.3</span>;<span class="comment">//隐式类型转换,implicit conversion from double to float</span></span><br><span class="line">    <span class="type">short</span> num7=<span class="number">650000</span>;<span class="comment">//</span></span><br><span class="line">    cout&lt;&lt;<span class="string">"number 7="</span>&lt;&lt;num7&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>运算的操作符只有4种</p>
<p>int,long,float,double</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">u_char a=<span class="number">255</span>;</span><br><span class="line">u_char b=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> c=a+b;</span><br><span class="line">cout&lt;&lt;<span class="string">"c="</span>&lt;&lt;c&lt;&lt;endl;<span class="comment">//结果是256</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>7. Operator accessory</title>
    <url>/2023/01/06/7-Operator-accessory/</url>
    <content><![CDATA[<h2 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h2><p>cout.setf(fmtflags,fmtflags)</p>
<table>
<thead>
<tr>
<th>Second Argument</th>
<th>First Augument</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>ios_base::basefield</td>
<td>ios_base::dec</td>
<td>Use base 10</td>
</tr>
<tr>
<td></td>
<td>ios_base::oct</td>
<td>Use base 8</td>
</tr>
<tr>
<td></td>
<td>ios::hex</td>
<td>Use base 16</td>
</tr>
<tr>
<td>ios_base::floatfield</td>
<td>ios_base::fixed</td>
<td>Use fixed-point notation</td>
</tr>
<tr>
<td></td>
<td>ios_base::scientific</td>
<td>Use scientific notation</td>
</tr>
<tr>
<td>ios_base::adjustfield</td>
<td>ios_base::left</td>
<td>Use left-justification</td>
</tr>
<tr>
<td></td>
<td>ios_base::right</td>
<td>Use right_justification</td>
</tr>
<tr>
<td></td>
<td>ios_base::internal</td>
<td>Left-justify sign or base prefix,right-justify value</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios_base::fixed,ios_base::floatfield);</span><br><span class="line">    cout&lt;&lt;<span class="number">56.8</span>;</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line">    cout.<span class="built_in">fill</span>(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="number">456.77</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">    cout&lt;&lt;<span class="number">123.356</span>&lt;&lt;endl;</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;<span class="number">3897.67845</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">56.800000++456.770000</span></span><br><span class="line"><span class="comment">123.36</span></span><br><span class="line"><span class="comment">3897.67845</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::fixed,ios_base::floatfield);</span><br><span class="line">    cout&lt;&lt;<span class="number">56.8</span>&lt;&lt;<span class="built_in">setw</span>(<span class="number">12</span>)&lt;&lt;<span class="number">456.77</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;<span class="number">123.356</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">5</span>)&lt;&lt;<span class="number">3897.6784385</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout.<span class="built_in">unsetf</span>(ios_base::fixed);</span><br><span class="line">    cout&lt;&lt;<span class="number">56.8</span>&lt;&lt;<span class="built_in">setw</span>(<span class="number">12</span>)&lt;&lt;<span class="built_in">setfill</span>(<span class="string">&#x27;#&#x27;</span>)&lt;&lt;<span class="number">456.77</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;<span class="number">123.356</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">5</span>)&lt;&lt;<span class="number">3897.678385</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">56.800000  456.770000</span></span><br><span class="line"><span class="comment">123.36</span></span><br><span class="line"><span class="comment">3897.67844</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">56.8######456.77</span></span><br><span class="line"><span class="comment">1.2e+02</span></span><br><span class="line"><span class="comment">3897.7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>8. Logical Structure</title>
    <url>/2023/01/07/8-Logical-Structure/</url>
    <content><![CDATA[<h2 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h2><p>最终能转化为布尔值的语句都可当作条件结构</p>
<p>关系表达式</p>
<table>
<thead>
<tr>
<th>Operator name</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>equal to</td>
<td>a&#x3D;&#x3D;b</td>
</tr>
<tr>
<td>not equal to</td>
<td>a!&#x3D;b</td>
</tr>
<tr>
<td>less than</td>
<td>a&lt;b</td>
</tr>
<tr>
<td>greater than</td>
<td>a&gt;b</td>
</tr>
<tr>
<td>less than or equal to</td>
<td>a&lt;&#x3D;b</td>
</tr>
<tr>
<td>greater than or equal to</td>
<td>a&gt;&#x3D;b</td>
</tr>
</tbody></table>
<p>Return 1 if the condition is true, and return 0 if the condition is false. </p>
<p>逻辑表达式</p>
<p>If an operand is not bool, it will be converted to bool implicity.</p>
<table>
<thead>
<tr>
<th>Operator name</th>
<th>Symbol-like operator</th>
<th>Keyword like operator</th>
</tr>
</thead>
<tbody><tr>
<td>negation</td>
<td>!</td>
<td>not</td>
</tr>
<tr>
<td>AND</td>
<td>&amp;&amp;</td>
<td>and</td>
</tr>
<tr>
<td>Inclusive</td>
<td>||</td>
<td>or</td>
</tr>
</tbody></table>
<p>优先级从高到低</p>
<p>常用非布尔表达式</p>
<p>指针</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p=<span class="keyword">new</span> <span class="type">int</span>[<span class="number">1024</span>]</span><br><span class="line"><span class="keyword">if</span>(!p)<span class="comment">//if(p==NULL)	</span></span><br></pre></td></tr></table></figure></div>



<h2 id="while-amp-do…-while"><a href="#while-amp-do…-while" class="headerlink" title="while&amp;do… while"></a>while&amp;do… while</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;num=&quot;</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    num=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;num=&quot;</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (num&gt;<span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Line&quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sum=&quot;</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无穷循环</span></span><br><span class="line"><span class="comment">//while(true),for(;;)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="go-to"><a href="#go-to" class="headerlink" title="go to"></a>go to</h2><p>用于Error跳转</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">mysquare</span><span class="params">(<span class="type">float</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> value;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Input a floating point number.&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;value;</span><br><span class="line">    <span class="type">float</span> result=<span class="built_in">mysquare</span>(value);</span><br><span class="line">    <span class="keyword">if</span>(result&gt;<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;The square is &quot;</span>&lt;&lt;result&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">mysquare</span><span class="params">(<span class="type">float</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> result=<span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">if</span>(value&gt;=<span class="number">1.0f</span>||value&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;The input is out of range.&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">goto</span> EXIT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    result=value*value;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    EXIT_ERROR:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char input_char=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Please input a character to start.&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span>(input_char!=<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;input_char;</span><br><span class="line">        <span class="keyword">if</span>(input_char==<span class="string">&#x27;q&#x27;</span>||input_char==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (input_char)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Move left.Input &#x27;q to quit.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Move right.Input &#x27;q&#x27; to quit&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Undifined Key.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>9.Arrays</title>
    <url>/2023/01/09/9-Arrays/</url>
    <content><![CDATA[<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>数组不初始化，则数据随机。</p>
<p>数组可以为定长也可变长</p>
<p>变长数组不可初始化</p>
<p>未知长度的数组</p>
<ol>
<li>数组声明时，编译器根据数组初始化长度确定数组长度。</li>
</ol>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num_array[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>用于函数</li>
</ol>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">array_sum</span><span class="params">(<span class="type">float</span> values[],<span class="type">size_t</span> length)</span></span></span><br></pre></td></tr></table></figure></div>

<p>数组的名字是一个地址，指向数组第一个元素的地址</p>
<p>数组的访问可以越界且编译不会产生任何警告</p>
<p>C和C++的数组不是对象，是一块连续的内存</p>
<p>未知函数传入二维数组必须指明列数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20230109232252190.png"
                      alt="image-20230109232252190"
                ></p>
<p>常量数组</p>
<p>const float value[4] &#x3D; {1.1f, 2.2f, 3.3f, 4.4f};</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Alternate WordPress to Hexo</title>
    <url>/2022/12/31/Alternate-WordPress-to-Hexo/</url>
    <content><![CDATA[<p>多年前使用过Wordpress后来虚拟主机到期后就没有再维护网页了，现在重新建立网页，一是课程作业，二是需要一个平台展示一下自己。<br>尽管我有一个服务器，但是我还是没有选择WordPress，首先我的写文章需求不大，花里胡哨的功能需求不多，静态博客基本够用；其次建立在服务器上的网页需要备案，可能需要多花一些时间和精力，还有一些额外的运维需求，所以还是选择静态博客。<br>静态博客的选择也很多，像Hugo、Hexo之类的，首先我尝试的是Hugo，因为他在Github上的星星要比Hexo多一些，尝试了一天后，Hugo死活都部署不到GithubPage，并且把主机地址改了之后在本地预览也有点小问题。于是第二天我就尝试Hexo，Hexo最大的特点是文档全，还是中文的，中文文档的主题也多，半天就能把demo部署到GithubPage上，再花一点时间就可以完善一些功能（评论之类的）。基本上可以快速进入写文章的状态。<br>Hexo官方文档：<a class="link"   href="https://hexo.io/zh-cn/docs/" >https://hexo.io/zh-cn/docs/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>本网站主题文档：<a class="link"   href="https://redefine-docs.evanluo.top/docs/intro" >https://redefine-docs.evanluo.top/docs/intro <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>Waline 评论系统教程： <a class="link"   href="https://www.bilibili.com/video/BV1Ft4y1A73f/" >https://www.bilibili.com/video/BV1Ft4y1A73f/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ primary</title>
    <url>/2023/01/01/C-primary/</url>
    <content><![CDATA[<p>第一课</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ example in C++11</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;string&gt; msg&#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;World&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> string&amp;word : msg)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; word &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Compile hello.cpp //编译一个C++文件</span><br><span class="line">    g++ hello.cpp</span><br><span class="line">Initialization of msg is a C++11 extension. We need //使用C++11标准编译C++文件</span><br><span class="line">    g++ hello.cpp --std=c++11</span><br><span class="line">Executable file can be generated as a.out. Change the output filename by -o option</span><br><span class="line">//编译默认生成的是a.out文件 使用-o规定输出文件名</span><br><span class="line">    g++ hello.cpp --std=c++11 -o hello</span><br><span class="line">//执行命令</span><br><span class="line">Execute</span><br><span class="line">    ./hello</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Kicad &amp; Freecad</title>
    <url>/2022/12/31/Kicad-Freecad/</url>
    <content><![CDATA[<h2 id="Kicad"><a href="#Kicad" class="headerlink" title="Kicad"></a>Kicad</h2><p>kicad是一款开源原理图和PCB绘制软件，相比于Altium Designer更容易上手，也更轻量。</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV12J411z7j7" >https://www.bilibili.com/video/BV12J411z7j7 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<iframe src="//player.bilibili.com/player.html?aid=77802238&bvid=BV12J411z7j7&cid=133105045&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>这一家的教程非常不错，并且还有一个QQ群，群里面有工具集成包，有一些插件特别好用：布局传递、自动布线、添加泪滴、Html BOM表等等</p>
<p>HtmlBOM插件属于必装插件，在焊接的时候可以方便地看到每一类元件的位置，维护的时候也能快速的定位到每一个网络。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20221231211502409.png"
                      alt="image-20221231211502409"
                ></p>
<p>浏览器插件推荐：  <a class="link"   href="https://github.com/xtoolbox/lckiconverter" >Lckiconverter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>它可以转换立创EDA的元件符号库和封装和3D图形库到Kicad</p>
<p>Kicad 6.0打板配置：</p>
<p>文件-绘制-绘制</p>
<p>文件-绘制-生成钻孔文件-生成钻孔文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20221231213304529.png"
                      alt="image-20221231213304529"
                ></p>
<h2 id="Freecad"><a href="#Freecad" class="headerlink" title="Freecad"></a>Freecad</h2><p>Freecad是基于平面设计的三维设计软件，可以用来设计元件3D外壳</p>
<p>在Kicad中导出电路板的3D图形</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20221231230830126.png"
                      alt="image-20221231230830126"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20221231231024358.png"
                      alt="image-20221231231024358"
                ></p>
<p>导出后在Freecad-File-Import</p>
<p>可以根据自己需要把电路板移动到某个起始原点，方便后续的操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20221231231103728.png"
                      alt="image-20221231231103728"
                ></p>
<p>Freecad官方教程：<a class="link"   href="https://www.youtube.com/@FreeCADAcademy" >https://www.youtube.com/@FreeCADAcademy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>一些花里胡哨的教程：<a class="link"   href="https://www.youtube.com/watch?v=ChgejkOR3lQ&list=LL&index=2&t=632s" >https://www.youtube.com/watch?v=ChgejkOR3lQ&amp;list=LL&amp;index=2&amp;t=632s <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="实物"><a href="#实物" class="headerlink" title="实物"></a>实物</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/IMG_20230128_104422.jpg"
                      alt="IMG_20230128_104422"
                ></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Practicable Opensource Software</title>
    <url>/2022/12/31/Practicable-Opensource-Software/</url>
    <content><![CDATA[<h2 id="GIMP"><a href="#GIMP" class="headerlink" title="GIMP"></a>GIMP</h2><p><a href="https://www.gimp.org/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.bing.com/th?id=AMMS_ad60936f1dbf1254090a4b90cd69ad4d&w=110&h=110"
                      alt="gimp"
                ></a><br>轻量的Photoshop替代品，中文界面。</p>
<h2 id="Zotero"><a href="#Zotero" class="headerlink" title="Zotero"></a>Zotero</h2><p><a href="https://www.zotero.org/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.zotero.org/static/images/bs4theme/zotero-logo.1519312231.svg"
                      alt="zotero logo"
                ></a><br>文献管理工具，中文界面，可以自动获取文献信息，生成引用</p>
<h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>代码编辑器</p>
<h2 id="Freeplane"><a href="#Freeplane" class="headerlink" title="Freeplane"></a>Freeplane</h2><p><a href="https://docs.freeplane.org/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://rsload.net/images5/Freeplane.png"
                      alt="freeplane"
                ></a><br>Xmind的替代品</p>
<h2 id="GeoGebra"><a href="#GeoGebra" class="headerlink" title="GeoGebra"></a>GeoGebra</h2><p><a href="https://www.geogebra.org/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.geogebra.org/assets/img/banner@2x.86188a23.png"
                      alt="geogebra"
                ></a><br>可视化数学求解工具</p>
<h2 id="SyncThing"><a href="#SyncThing" class="headerlink" title="SyncThing"></a>SyncThing</h2><p><a href="https://syncthing.net/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://syncthing.net/img/logo-horizontal.svg"
                      alt="Syncthing"
                ></a><br>无需公网ip，去中心的文件同步工具</p>
<h2 id="OBS-Studio"><a href="#OBS-Studio" class="headerlink" title="OBS Studio"></a>OBS Studio</h2><p><a href="https://obsproject.com/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://obsproject.com/assets/images/new_icon_small-r.png"
                      alt="OBS"
                ></a><br>网课录屏工具</p>
<h2 id="Joplin"><a href="#Joplin" class="headerlink" title="Joplin"></a>Joplin</h2><p><a href="https://joplinapp.org/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://joplinapp.org/images/logo-text.svg"
                      alt="joplin"
                ></a><br>Markdown笔记工具</p>
<h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p><a href="https://www.wireshark.org/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.wireshark.org/assets/theme-2015/images/wireshark_logo@2x.png"
                      alt="Wireshark"
                ></a><br>抓包工具</p>
<h2 id="BalenaEtcher"><a href="#BalenaEtcher" class="headerlink" title="BalenaEtcher"></a>BalenaEtcher</h2><p>各种系统烧录工具</p>
<h2 id="Goldendict"><a href="#Goldendict" class="headerlink" title="Goldendict"></a>Goldendict</h2><p>翻译软件，建议下载修改版</p>
<h2 id="CodeBlocks"><a href="#CodeBlocks" class="headerlink" title="CodeBlocks"></a>CodeBlocks</h2><p><a href="http://www.codeblocks.org/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.codeblocks.org/images/logo160.png"
                      alt="CodeBlocks"
                ></a><br>超轻量的C语言和C++的编写工具</p>
<h2 id="MarkText"><a href="#MarkText" class="headerlink" title="MarkText"></a>MarkText</h2><p>Typora的不完整替代，长得最像Typora的markdown编辑器</p>
<h2 id="Calibre"><a href="#Calibre" class="headerlink" title="Calibre"></a>Calibre</h2><p>图书管理和格式转换神器</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Opensource</tag>
      </tags>
  </entry>
  <entry>
    <title>Static Route Experiment</title>
    <url>/2023/01/03/Static-Route-Experiment/</url>
    <content><![CDATA[<h2 id="静态路由实验"><a href="#静态路由实验" class="headerlink" title="静态路由实验"></a>静态路由实验</h2><p>题目要求：Host C，Host D连接在同一路由B上</p>
<p>由于C的ip:10.65.1.1子网掩码为255.255.0.0，故网络号为10.65.0.0</p>
<p>由于D的ip:10.66.1.1子网掩码为255.255.0.0，故网络号为10.66.0.0</p>
<p>两个网络号不一样，故在两个子网内</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/image-20230104151018131.png"
                      alt="image-20230104151018131"
                ></p>
<p>设置方法，</p>
<ol>
<li>路由器和主机分别分配地址，在一条线两端的端口的地址要在同一个网络号内，故</li>
</ol>
<p>A:10.68.1.1-AE0:10.68.1.2</p>
<p>B:10.68.1.1-AE1:10.68.1.2</p>
<p>AS0:10.70.1.2-BS1:10.70.1.1</p>
<p>C:10.65.1.1-BE1:10.65.1.2</p>
<p>D:10.66.1.1-BE2:10.66.1.2</p>
<ol start="2">
<li>路由器的端口设为网关号</li>
<li>配置路由表</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">路由A设置，省略登录信息，下同</span><br><span class="line">[RouterA]interface ethernet0</span><br><span class="line">[RouterA-Ethernet0]ip addrress 10.68.1.2 255.255.0.0</span><br><span class="line">[RouterA-Ethernet0]undo shutdown</span><br><span class="line">[RouterA-Ethernet0]int e1</span><br><span class="line">[RouterA-Ethernet1]ip addrress 10.67.1.2 255.255.0.0</span><br><span class="line">[RouterA-Ethernet1]undo shutdown</span><br><span class="line">[RouterA-Ethernet1]int s0</span><br><span class="line">[RouterA-Serial0]ip addrress 10.70.1.2 255.255.0.0</span><br><span class="line">[RouterA-Serial0]undo shutdown</span><br><span class="line">[RouterA-Serial0]clock rate 64000</span><br><span class="line">[RouterA-Serial0]quit</span><br><span class="line">[RouterA]ip routing</span><br><span class="line">[RouterA]ip route-static 10.66.0.0 255.255.0.0 10.70.1.1</span><br><span class="line">[RouterA]ip routing</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">路由器B设置</span><br><span class="line">[RouterB]interface ethernet0</span><br><span class="line">[RouterB-Ethernet0]ip addrress 10.66.1.2 255.255.0.0</span><br><span class="line">[RouterB-Ethernet0]undo shutdown</span><br><span class="line">[RouterB-Ethernet0]int e1</span><br><span class="line">[RouterB-Ethernet1]ip addrress 10.65.1.2 255.255.0.0</span><br><span class="line">[RouterB-Ethernet1]undo shutdown</span><br><span class="line">[RouterB-Ethernet1]int s1</span><br><span class="line">[RouterB-Serial1]ip addrress 10.70.1.1 255.255.0.0</span><br><span class="line">[RouterB-Serial1]undo shutdown</span><br><span class="line">[RouterB-Serial1]quit</span><br><span class="line">[RouterB]ip routing</span><br><span class="line">[RouterB]dis curr</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算机A设置</span><br><span class="line">[root@PCA root]# ifconfig eth0 10.68.1.1 netmask 255.255.0.0</span><br><span class="line">[root@PCA root]#route add default gw 10.68.1.2</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算机B设置</span><br><span class="line">[root@PCB root]# ifconfig eth0 10.67.1.1 netmask 255.255.0.0</span><br><span class="line">[root@PCB root]#route add default gw 10.67.1.2</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算机C设置</span><br><span class="line">[root@PCC root]# ifconfig eth0 10.65.1.1 netmask 255.255.0.0</span><br><span class="line">[root@PCC root]#route add default gw 10.65.1.2</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算机D设置</span><br><span class="line">[root@PCD root]# ifconfig eth0 10.66.1.1 netmask 255.255.0.0</span><br><span class="line">[root@PCD root]#route add default gw 10.66.1.2</span><br></pre></td></tr></table></figure></div>

<p>最后验证</p>
<p>ping 10.66.1.2</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">此时路由器A的状态</span><br><span class="line">Now create configuration...</span><br><span class="line">Current configuration</span><br><span class="line">!</span><br><span class="line">version 1.74</span><br><span class="line">info-center console</span><br><span class="line">firewall enable</span><br><span class="line">sysname   Quidway</span><br><span class="line">super password </span><br><span class="line">!</span><br><span class="line">interface Aux0</span><br><span class="line"> async mode flow</span><br><span class="line"> phy-mru 0</span><br><span class="line"> link-protocol ppp</span><br><span class="line">!</span><br><span class="line">interface Ethernet0</span><br><span class="line">ip address: 10.68.1.2 255.255.0.0</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">interface Ethernet1</span><br><span class="line">ip address: 10.67.1.2 255.255.0.0</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">interface Serial0</span><br><span class="line">clock rate :64000</span><br><span class="line">ip address: 10.70.1.2 255.255.0.0</span><br><span class="line"> link-protocol ppp</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">interface Serial1</span><br><span class="line"> clock DTE</span><br><span class="line"> no ip address</span><br><span class="line"> link-protocol ppp</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">shutdown</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"> network</span><br><span class="line"> import static cost x</span><br><span class="line"> import direct cost x</span><br><span class="line">ip routing</span><br><span class="line">ip route-static 10.66.0.0 255.255.0.0 10.70.1.1|</span><br><span class="line">!</span><br><span class="line">line vty 0 4</span><br><span class="line">password </span><br><span class="line"></span><br><span class="line">!</span><br><span class="line">return</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">此时路由器B的状态</span><br><span class="line">Now create configuration...</span><br><span class="line">Current configuration</span><br><span class="line">!</span><br><span class="line">version 1.74</span><br><span class="line">info-center console</span><br><span class="line">firewall enable</span><br><span class="line">sysname   Quidway</span><br><span class="line">super password </span><br><span class="line">!</span><br><span class="line">interface Aux0</span><br><span class="line"> async mode flow</span><br><span class="line"> phy-mru 0</span><br><span class="line"> link-protocol ppp</span><br><span class="line">!</span><br><span class="line">interface Ethernet0</span><br><span class="line">ip address: 10.66.1.2 255.255.0.0</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">interface Ethernet1</span><br><span class="line">ip address: 10.65.1.2 255.255.0.0</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">interface Serial0</span><br><span class="line"> clock DTE</span><br><span class="line"> no ip address</span><br><span class="line"> link-protocol ppp</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">shutdown</span><br><span class="line">!</span><br><span class="line">interface Serial1</span><br><span class="line"> clock DTE</span><br><span class="line">ip address: 10.70.1.1 255.255.0.0</span><br><span class="line"> link-protocol ppp</span><br><span class="line"> no access-list in</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"> network</span><br><span class="line"> import static cost x</span><br><span class="line"> import direct cost x</span><br><span class="line">ip routing</span><br><span class="line">ip route-static</span><br><span class="line">!</span><br><span class="line">line vty 0 4</span><br><span class="line">password </span><br><span class="line"></span><br><span class="line">!</span><br><span class="line">return</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../image/clip_image001.png"
                      alt="img"
                ></p>
<p>路由器的顶级理解：<a class="link"   href="https://www.zhihu.com/question/362842680/answer/951412213" >https://www.zhihu.com/question/362842680/answer/951412213 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Homework</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/12/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Pytorch Learn the Basics</title>
    <url>/2023/02/02/Pytorch-Learn-the-Basics/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><p>首先安装miniconda</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/44398592" >https://zhuanlan.zhihu.com/p/44398592 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>安装pytorch</p>
<p><a class="link"   href="https://pytorch.org/get-started/locally/" >https://pytorch.org/get-started/locally/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
<h1 id="pytorch简介"><a href="#pytorch简介" class="headerlink" title="pytorch简介"></a>pytorch简介</h1><p>pytorch是一种数据结构，语法和numpy差不多。</p>
<h1 id="pytorch基础语法"><a href="#pytorch基础语法" class="headerlink" title="pytorch基础语法"></a>pytorch基础语法</h1><ol>
<li><p>引入pytorch</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化tensor</p>
<p>从显示数据，numpy数据，某个类型的pytorch数据，某个维度和形状中创建数据</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">data = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">x_data = torch.tensor(data)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">np_array = np.array(data)</span><br><span class="line">x_np = torch.from_numpy(np_array)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">x_ones = torch.ones_like(x_data) # retains the properties of x_data</span><br><span class="line">print(f&quot;Ones Tensor: \n &#123;x_ones&#125; \n&quot;)</span><br><span class="line"></span><br><span class="line">x_rand = torch.rand_like(x_data, dtype=torch.float) # overrides the datatype of x_data</span><br><span class="line">print(f&quot;Random Tensor: \n &#123;x_rand&#125; \n&quot;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">shape = (<span class="number">2</span>,<span class="number">3</span>,)</span><br><span class="line">rand_tensor = torch.rand(shape)</span><br><span class="line">ones_tensor = torch.ones(shape)</span><br><span class="line">zeros_tensor = torch.zeros(shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Random Tensor: \n <span class="subst">&#123;rand_tensor&#125;</span> \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Ones Tensor: \n <span class="subst">&#123;ones_tensor&#125;</span> \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Zeros Tensor: \n <span class="subst">&#123;zeros_tensor&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>获取torch数据的属性</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">tensor = torch.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Shape of tensor: <span class="subst">&#123;tensor.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Datatype of tensor: <span class="subst">&#123;tensor.dtype&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Device tensor is stored on: <span class="subst">&#123;tensor.device&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用GPU运算</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We move our tensor to the GPU if available</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    tensor = tensor.to(<span class="string">&quot;cuda&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Numpy与Tensor相互转换，但实际的指针是一样的</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">t = torch.ones(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t: <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line">n = t.numpy()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n: <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">t.add_(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t: <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n: <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = np.ones(<span class="number">5</span>)</span><br><span class="line">t = torch.from_numpy(n)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">np.add(n, <span class="number">1</span>, out=n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t: <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n: <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch Datasets &amp;</title>
    <url>/2023/02/02/Pytorch-Datasets-DataLoaders/</url>
    <content><![CDATA[<h1 id="载入数据集"><a href="#载入数据集" class="headerlink" title="载入数据集"></a>载入数据集</h1><p>pytorch提供了两种数据集示例：torch.utils.data.Dataset包含了样本和标签，torch.utils.data.DataLoader包含了Datasets的样本。</p>
<h1 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h1><p>加载Fashion-MNIST数据集，数据为28×28的灰度图像，包含十个种类</p>
<p>root是地址</p>
<p>train选择训练还是测试集</p>
<p>download，如果本地没有该数据集则下载</p>
<p>transform和target_transform未来会提及</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">training_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">labels_map = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;T-Shirt&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;Trouser&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;Pullover&quot;</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">&quot;Dress&quot;</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">&quot;Coat&quot;</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">&quot;Sandal&quot;</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">&quot;Shirt&quot;</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="string">&quot;Sneaker&quot;</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">&quot;Bag&quot;</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">&quot;Ankle Boot&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">figure = plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">cols, rows = <span class="number">3</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, cols * rows + <span class="number">1</span>):</span><br><span class="line">    sample_idx = torch.randint(<span class="built_in">len</span>(training_data), size=(<span class="number">1</span>,)).item()</span><br><span class="line">    <span class="comment"># 在0~数据集大小内生成一个torch类，torch由一个整数组成</span></span><br><span class="line">    img, label = training_data[sample_idx]</span><br><span class="line">    figure.add_subplot(rows, cols, i)</span><br><span class="line">    plt.title(labels_map[label])</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.imshow(img.squeeze(), cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<p>torch.randint用法：<a class="link"   href="https://pytorch.org/docs/stable/generated/torch.randint.html#torch.randint" >https://pytorch.org/docs/stable/generated/torch.randint.html#torch.randint <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="建立一个属于自己的数据集"><a href="#建立一个属于自己的数据集" class="headerlink" title="建立一个属于自己的数据集"></a>建立一个属于自己的数据集</h1><p>python关于类的定义：<a class="link"   href="https://zhuanlan.zhihu.com/p/30024792" >https://zhuanlan.zhihu.com/p/30024792 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Dataset必须包含三个方法：__init__,__len__,__getitem__</p>
<p>FashionMNIST把图像放在img_dir文件目录里，标签放在一个单独的CSV文件里</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import os</span><br><span class="line">import pandas as pd</span><br><span class="line">from torchvision.io import read_image</span><br><span class="line"></span><br><span class="line">class CustomImageDataset(Dataset):</span><br><span class="line">    def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):</span><br><span class="line">        self.img_labels = pd.read_csv(annotations_file)</span><br><span class="line">        self.img_dir = img_dir</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.target_transform = target_transform</span><br><span class="line"></span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.img_labels)</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, idx):</span><br><span class="line">        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])</span><br><span class="line">        image = read_image(img_path)</span><br><span class="line">        label = self.img_labels.iloc[idx, 1]</span><br><span class="line">        if self.transform:</span><br><span class="line">            image = self.transform(image)</span><br><span class="line">        if self.target_transform:</span><br><span class="line">            label = self.target_transform(label)</span><br><span class="line">        return image, label</span><br></pre></td></tr></table></figure></div>

<p>labels.csv文件形式</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshirt1.jpg, 0</span><br><span class="line">tshirt2.jpg, 0</span><br><span class="line">......</span><br><span class="line">ankleboot999.jpg, 9</span><br></pre></td></tr></table></figure></div>

<h1 id="训练前的数据准备"><a href="#训练前的数据准备" class="headerlink" title="训练前的数据准备"></a>训练前的数据准备</h1><p>训练模型通常从总体中抽取部分数据多次洗牌再训练</p>
<p>DataLoader是一个实现随机抽取数据的函数</p>
<p>随机生成五次小数据集，并数据集的大小和第一张图</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">train_dataloader = DataLoader(training_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(5):</span><br><span class="line">	# Display image and label.</span><br><span class="line">    train_features, train_labels = next(iter(train_dataloader))</span><br><span class="line">    print(f&quot;Feature batch shape: &#123;train_features.size()&#125;&quot;)</span><br><span class="line">    print(f&quot;Labels batch shape: &#123;train_labels.size()&#125;&quot;)</span><br><span class="line">    img = train_features[0].squeeze()</span><br><span class="line">    label = train_labels[0]</span><br><span class="line">    plt.imshow(img, cmap=&quot;gray&quot;)</span><br><span class="line">    plt.show()</span><br><span class="line">    print(f&quot;Label: &#123;label&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>官方文档：<a class="link"   href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html" >https://pytorch.org/tutorials/beginner/basics/data_tutorial.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>python</category>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
